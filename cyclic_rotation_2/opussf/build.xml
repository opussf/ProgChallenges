<project name="cr2" default="all">

	<tstamp/>
	<property file="build.properties"/>
	<property environment="env"/>
	<property name="env.BUILD_NUMBER" value=""/>
	<property name="build.number" value=""/>
	<!--  Pull git repo info -->
	<exec executable="git" dir="." outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
		<arg line="describe --tags --always HEAD" />
	</exec>
	<condition property="repository.version" value="${git.revision}" else="unknown">
		<and>
			<isset property="git.revision"/>
			<length string="${git.revision}" trim="yes" length="0" when="greater"/>
		</and>
	</condition>
	<!-- find gitbranch -->
	<exec executable="git" dir="." outputproperty="git.branch" failifexecutionfails="false" errorproperty="">
		<arg line="rev-parse --abbrev-ref HEAD"/>
	</exec>
	<condition property="branch" value="-${git.branch}" else="">
		<and>
			<isset property="git.branch"/>
			<not>
				<or>
					<equals arg1="${git.branch}" arg2="master"/>
					<equals arg1="${git.branch}" arg2="HEAD"/>
				</or>
			</not>
		</and>
	</condition>

	<property name="version.number" value="${repository.version}${branch}${build.number}"/>
	<echo>Building: ${version.number}</echo>
	<!-- end git repo info -->

	<property name="test.dir" location="test"/>

	<property name="target.dir" location="target"/>
	<property name="report.dir" location="${target.dir}/reports"/>

	<condition property="lua.test.check">
		<available file="${test.dir}/test.lua" type="file"/>
	</condition>

	<target name="clean" description="Cleans old builds">
		<delete dir="target" verbose="true"/>
	</target>

	<target name="all" depends="python, lua" description="Run all">
	</target>

	<target name="python" description="run Python">
	</target>

	<target name="lua" description="run Lua">
		<mkdir  dir="${report.dir}"/>
		<exec   executable="lua" dir="test" resultproperty="testResult">
			<arg value="test.lua"/>
		</exec>
		<move todir="${report.dir}" file="${test.dir}/testOut.xml"/>
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}">
				<include name="testOut.xml"/>
			</fileset>
			<report todir="${report.dir}/html"
					format="noframes"/>
		</junitreport>
		<fail message="The test failed. Please see the output for details.">
			<condition>
				<not>
					<equals arg1="${testResult}" arg2="0"/>
				</not>
			</condition>
		</fail>
	</target>

</project>
